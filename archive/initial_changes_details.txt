/boundless/src/rpcrawtransaction.cpp
line 242
change
const CScriptID& hash = boost::get<const CScriptID&>(address);
to
const CScriptID& hash = boost::get<CScriptID>(address);
###
rename everything

find . -type f -print0 | xargs -0 sed -i 's/litecoin/boundless/g'
find . -type f -print0 | xargs -0 sed -i 's/Litecoin/Boundless/g'
find . -type f -print0 | xargs -0 sed -i 's/LiteCoin/BoundLess/g'
find . -type f -print0 | xargs -0 sed -i 's/LITECOIN/BOUNDLESS/g'
find . -type f -print0 | xargs -0 sed -i 's/LTC/BLS/g'

make -f makefile.unix
####
change default ports for project different than litecoin's & bitcoin's
find . -type f -print0 | xargs -0 sed -i 's/9333/3343/g'
find . -type f -print0 | xargs -0 sed -i 's/9332/3342/g'  ##I'm not sure what i changed to, but this should be fine for this

###
Change the address "space" of boundless addresses
/boundless/src/base58.h
line 275 we changed to below:
PUBKEY_ADDRESS = 0x53, // Boundless addresses start with S --- update: i realized this in wrong, and i will fix for production. doesnt badly affect atm
## here is the list of prefixes https://en.bitcoin.it/wiki/List_of_address_prefixes
line 278 testnet
PUBKEY_ADDRESS_TEST = 0x73,//s

####
go to home folder or desktop
generate & change the alertkeys and genesis hexes & keypairs
type:
openssl ecparam -genkey -name secp256k1 -out alertkey.pem
openssl ec -in alertkey.pem -text > alertkey.hex
openssl ecparam -genkey -name secp256k1 -out testnetalert.pem
openssl ec -in testnetalert.pem -text > testnetalert.hex
openssl ecparam -genkey -name secp256k1 -out genesiscoinbase.pem
openssl ec -in testnetalert.pem -text > genesiscoinbase.hex

this generates our alert key hex.
#### type:
cat alertkey.hex to get our publickey 
replace at line 22 and 23 for main and testnet public keys in alert.cpp

### type:
cat genesiscoinbase.hex to get our coinbase hex
main.cpp line 2788 replace hex

##peer magic
main.cpp
line 2745 change last digit of hex for each line : example 0xF1 becomes 0xFa   etc...
and line 3082 same thing for mainnet

##removing hard coded seed nodes and ip addresses
net.cpp
line 1176/78 remove all seed node domains and leave {NULL, NULL}
line 1228 remove all hard coded hexes of ip addresses. do not leave blank, so we put 0x0 to avoid compilation issues

##change coin parameters
main.cpp
line 1090 change/or keep starting reward to 50 BLS coins per block
line 1093 determines the halving schedule, how often the block reward is cut in half
line 1098 determines how quickly the difficulty adjustment occurs
line 1099 determines how quickly a block should be found - 3 minutes for Boundless

##chnge max money
main.h
line 55 kept at 84 million 
line 58 coin maturity - how many blocks have past before coins can be spent - left at 100
line 627 transaction priority /small tx free/ priority? https://youtu.be/RPgpedUw5W4?si=f3e2F930id5xY4G7&t=263

#change in main.cpp
main.cpp
line 2788 change to same number as line 1090 above
line 2882 change news headline to current news
##changing the block.ntime 
type: date +%s 
change line 2794 mainnet block.ntime
once more for date +%s
line 2800 for test

##merkle root - stay in main.cpp
line 2809 remove the merkle root hex except for 0x

compile make -f makefile.unix
then run ./boundlessd which will give error
but we got new merkle root hex located at ~/.boundless/debug.log
the last logged entry is our valid merkle hash
copy and paste into main.cpp line 2849
### note: we had to get this code block and put into litecoin at line 2802 after if testnet statement (they didn't need to reproduce and new merkle, and removed this from the litecoin). The boolean condition determines whether to produce genesis. if (false && block.GetHash() != hashGenesisBlock).... if changed to true, we get out genesis block.. see pastebin reference https://pastebin.com/du2XdxCC

### producing genesis block
-remove testnet hex from line 2748 and mainnet genesis hex from line 38
compile again
make -f makefile.unix

genesis testnet
type:
./boundlessd -testnet
open ~/.boundless/testnet3/debug.log to find testnet genesis hex
go to bottom of file and grab block.nNonce at first found block
copy and paste at line 2800
go back to debug.log and copy block.GetHash
paste at line 2748

compile again

type ./boundlessd   ///without testnet flag

go to ~/.boundless/debug.log to get results
find same info as above nNonce, GetHash
line 2795 nonce
line 38 GetHash

///turn off true flad at line 2802 from above, so we do not repeat genesis block being produced.


##Change Checkpoints.cpp
line 38, we remove all previous checkpoints of litecoin, (checkpoints are used to reduce ddos attacks etc and have referencable checkpoints)
we start instead at block 0 and our newly created genesis block hash
   static MapCheckpoints mapCheckpoints =
        boost::assign::map_list_of
        (  0, uint256("0x29aa0fb842da2afb38951b48a74ae9637f0c9ec4affe8625d059501ffc816d96"))
        ;

line 40-46 we copy these values from main.cpp, line 2973 for our  block.nTime  = 1696587231; and copy to checkpoint line 42
